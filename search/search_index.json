{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the freshrss-application documentation. This site describes the Docker based FreshRSS deployment that powers our internal news aggregator.</p> <p>Use the navigation to learn more about the platform:</p> <ul> <li>Architecture \u2013 container layout and data flows</li> <li>Dependencies \u2013 local tooling required to run the stack</li> <li>Future Work \u2013 ideas being considered</li> <li>Planned Features \u2013 enhancements already on the roadmap</li> </ul>","boost":2},{"location":"architecture/","title":"Architecture","text":"<p>The deployment runs two core services on a shared Docker network:</p> <p></p> <ul> <li>FreshRSS handles the HTTP interface and periodic feed updates. Persistent data and user-installed extensions are mounted from host volumes.</li> <li>PostgreSQL provides durable storage. Connection parameters are injected through the <code>.env</code> file.</li> </ul> <p>Each service attaches to the <code>webgrip</code> bridge network and persists data via dedicated Docker volumes, allowing containers to be recreated without data loss.</p>"},{"location":"dependencies/","title":"Dependencies","text":"<p>The following tools are required to develop and run the stack locally:</p> <ul> <li>Docker &amp; Docker Compose \u2013 container runtime and orchestration</li> <li>GNU Make \u2013 convenience commands defined in the <code>Makefile</code></li> <li>mkcert (optional) \u2013 generate local CA certificates for HTTPS testing</li> <li>Helm (optional) \u2013 linting and dependency management for Helm charts</li> </ul> <p>At runtime the application relies on:</p> <ul> <li>FreshRSS \u2013 lightweight RSS reader written in PHP</li> <li>PostgreSQL \u2013 relational database used for storage</li> </ul>"},{"location":"future-work/","title":"Future Work","text":"<p>The following ideas are being explored to evolve the platform:</p> <ul> <li>Support alternative databases such as SQLite for lightweight deployments.</li> <li>Publish a Helm chart to simplify Kubernetes deployments.</li> <li>Introduce high-availability mode with database replication and automatic failover.</li> <li>Integrate observability tooling (Prometheus, Grafana) for runtime metrics.</li> <li>Provide automated upgrade scripts to reduce maintenance effort.</li> </ul>"},{"location":"planned_features/","title":"Planned Features","text":"<p>These features are on the roadmap and will be prioritised in upcoming sprints:</p> <ul> <li>OAuth2 and OpenID Connect authentication for multi-user instances</li> <li>Automatic encrypted backups of database and extensions</li> <li>Configurable feed refresh scheduler with per-feed overrides</li> <li>Built-in Prometheus metrics endpoint</li> <li>LDAP/Active Directory integration for enterprise deployments</li> <li>Role-based access control with granular permissions</li> <li>UI for tag and category management with bulk operations</li> <li>Full-text search powered by PostgreSQL</li> <li>Native dark mode and theme switcher</li> <li>S3-compatible storage backend for media and uploads</li> <li>Webhooks to notify external systems on feed updates</li> <li>Rate limiting and retry policies to respect publisher limits</li> <li>Web-based OPML import/export assistant with validation</li> <li>Plugin marketplace for discovering and installing extensions</li> <li>Configurable article retention and cleanup rules</li> <li>Integration with read-it-later services like Pocket and Instapaper</li> <li>Real-time feed refresh progress dashboard</li> <li>Built-in health checks and alerting hooks</li> <li>API token management interface for third-party apps</li> <li>Multi-language user interface with community translations</li> </ul>"}]}